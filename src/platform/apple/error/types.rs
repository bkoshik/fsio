use thiserror::Error;

pub type Result<T> = std::result::Result<T, Error>;

#[derive(Error, Debug, Clone, Eq, PartialEq)]
#[repr(i32)]
pub enum Error {
    Unknown = 0,
    PermissionDenied = 1,                                   // libc::EPERM,
    NotFound = 2,                                           // libc::ENOENT,
    NoSuchProcess = 3,                                      // libc::ESRCH,
    Interrupted = 4,                                        // libc::EINTR,
    IoError = 5,                                            // libc::EIO,
    NoSuchDeviceOrAddress = 6,                              // libc::ENXIO,
    ArgumentListTooLong = 7,                                // libc::E2BIG,
    ExecFormatError = 8,                                    // libc::ENOEXEC,
    BadFileDescriptor = 9,                                  // libc::EBADF,
    NoChildProcesses = 10,                                  // libc::ECHILD,
    ResourceDeadlockWouldOccur = 11,                        // libc::EDEADLK,
    OutOfMemory = 12,                                       // libc::ENOMEM,
    AccessDenied = 13,                                      // libc::EACCES,
    BadAddress = 14,                                        // libc::EFAULT,
    BlockDeviceRequired = 15,                               // libc::ENOTBLK,
    DeviceBusy = 16,                                        // libc::EBUSY,
    AlreadyExists = 17,                                     // libc::EEXIST,
    CrossDeviceLink = 18,                                   // libc::EXDEV,
    NoSuchDevice = 19,                                      // libc::ENODEV,
    NotDirectory = 20,                                      // libc::ENOTDIR,
    IsDirectory = 21,                                       // libc::EISDIR,
    InvalidArgument = 22,                                   // libc::EINVAL,
    FileTableOverflow = 23,                                 // libc::ENFILE,
    TooManyOpenFiles = 24,                                  // libc::EMFILE,
    NotTTY = 25,                                            // libc::ENOTTY,
    TextFileBusy = 26,                                      // libc::ETXTBSY,
    FileTooLarge = 27,                                      // libc::EFBIG,
    NoSpaceLeftOnDevice = 28,                               // libc::ENOSPC,
    IllegalSeek = 29,                                       // libc::ESPIPE,
    ReadOnlyFilesystem = 30,                                // libc::EROFS,
    TooManyLinks = 31,                                      // libc::EMLINK,
    BrokenPipe = 32,                                        // libc::EPIPE,
    MathArgumentOutOfDomain = 33,                           // libc::EDOM,
    ResultTooLarge = 34,                                    // libc::ERANGE,
    ResourceUnavailableTryAgain = 35,                       // libc::EAGAIN,
    OperationInProgress = 36,                               // libc::EINPROGRESS,
    OperationAlreadyInProgress = 37,                        // libc::EALREADY,
    SocketNotSupported = 38,                                // libc::ENOTSOCK,
    DestinationAddressRequired = 39,                        // libc::EDESTADDRREQ,
    MessageTooLong = 40,                                    // libc::EMSGSIZE,
    ProtocolWrongTypeForSocket = 41,                        // libc::EPROTOTYPE,
    ProtocolNotAvailable = 42,                              // libc::ENOPROTOOPT,
    ProtocolNotSupported = 43,                              // libc::EPROTONOSUPPORT,
    SocketTypeNotSupported = 44,                            // libc::ESOCKTNOSUPPORT,
    OperationNotSupported = 45,                             // libc::ENOTSUP,
    ProtocolFamilyNotSupported = 46,                        // libc::EPFNOSUPPORT,
    AddressFamilyNotSupported = 47,                         // libc::EAFNOSUPPORT,
    AddressInUse = 48,                                      // libc::EADDRINUSE,
    AddressNotAvailable = 49,                               // libc::EADDRNOTAVAIL,
    NetworkDown = 50,                                       // libc::ENETDOWN,
    NetworkUnreachable = 51,                                // libc::ENETUNREACH,
    NetworkReset = 52,                                      // libc::ENETRESET,
    ConnectionAborted = 53,                                 // libc::ECONNABORTED,
    ConnectionReset = 54,                                   // libc::ECONNRESET,
    NoBufferSpaceAvailable = 55,                            // libc::ENOBUFS,
    SocketIsConnected = 56,                                 // libc::EISCONN,
    SocketNotConnected = 57,                                // libc::ENOTCONN,
    Shutdown = 58,                                          // libc::ESHUTDOWN,
    TooManyReferences = 59,                                 // libc::ETOOMANYREFS,
    TimedOut = 60,                                          // libc::ETIMEDOUT,
    ConnectionRefused = 61,                                 // libc::ECONNREFUSED,
    TooManySymbolicLinks = 62,                              // libc::ELOOP,
    FileNameTooLong = 63,                                   // libc::ENAMETOOLONG,
    HostDown = 64,                                          // libc::EHOSTDOWN,
    HostUnreachable = 65,                                   // libc::EHOSTUNREACH,
    DirectoryNotEmpty = 66,                                 // libc::ENOTEMPTY,
    ProcessLimitReached = 67,                               // libc::EPROCLIM,
    TooManyUsers = 68,                                      // libc::EUSERS,
    DiskQuotaExceeded = 69,                                 // libc::EDQUOT,
    StaleFileHandle = 70,                                   // libc::ESTALE,
    RemoteResourceNotAvailable = 71,                        // libc::EREMOTE,
    BadRPC = 72,                                            // libc::EBADRPC,
    RPCMismatch = 73,                                       // libc::ERPCMISMATCH,
    ProgramUnavailable = 74,                                // libc::EPROGUNAVAIL,
    ProgramMismatch = 75,                                   // libc::EPROGMISMATCH,
    ProcedureUnavailable = 76,                              // libc::EPROCUNAVAIL,
    NoLocksAvailable = 77,                                  // libc::ENOLCK,
    FunctionNotImplemented = 78,                            // libc::ENOSYS,
    InappropriateFileType = 79,                             // libc::EFTYPE,
    AuthenticationError = 80,                               // libc::EAUTH,
    NeedAuthentication = 81,                                // libc::ENEEDAUTH,
    PowerOff = 82,                                          // libc::EPWROFF,
    DeviceError = 83,                                       // libc::EDEVERR,
    ValueOverflow = 84,                                     // libc::EOVERFLOW,
    BadExecutable = 85,                                     // libc::EBADEXEC,
    BadArchitecture = 86,                                   // libc::EBADARCH,
    SharedLibraryVersionMismatch = 87,                      // libc::ESHLIBVERS,
    BadMachO = 88,                                          // libc::EBADMACHO,
    OperationCanceled = 89,                                 // libc::ECANCELED,
    IdentifierRemoved = 90,                                 // libc::EIDRM,
    NoMessageAvailable = 91,                                // libc::ENOMSG,
    IllegalByteSequence = 92,                               // libc::EILSEQ,
    AttributeNotFound = 93,                                 // libc::ENOATTR,
    BadMessage = 94,                                        // libc::EBADMSG,
    MultihopAttempted = 95,                                 // libc::EMULTIHOP,
    NoDataAvailable = 96,                                   // libc::ENODATA,
    LinkHasBeenSevered = 97,                                // libc::ENOLINK,
    NoStreamResources = 98,                                 // libc::ENOSR,
    NotStructuredStream = 99,                               // libc::ENOSTR,
    ProtocolError = 100,                                    // libc::EPROTO,
    TimerExpired = 101,                                     // libc::ETIME,
    OperationNotSupportedOnSocket = 102,                    // libc::EOPNOTSUPP,
    NoPolicy = 103,                                         // libc::ENOPOLICY,
    NotRecoverable = 104,                                   // libc::ENOTRECOVERABLE,
    OwnerDead = 105,                                        // libc::EOWNERDEAD,
    QueueFull = 106,                                        // libc::EQFULL,
}

impl Error {
    pub const WOULD_BLOCK: Self = Self::ResourceUnavailableTryAgain;
    pub const LAST: Self = Self::QueueFull;
}