use std::fmt::Display;
use crate::error::Error;

impl Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "Unknown error"),
            Self::PermissionDenied => write!(f, "Permission denied"),
            Self::NotFound => write!(f, "No such file or directory"),
            Self::NoSuchProcess => write!(f, "No such process"),
            Self::Interrupted => write!(f, "Interrupted"),
            Self::IoError => write!(f, "I/O error_types"),
            Self::NoSuchDeviceOrAddress => write!(f, "No such device or address"),
            Self::ArgumentListTooLong => write!(f, "Argument list too long"),
            Self::ExecFormatError => write!(f, "Exec format error"),
            Self::BadFileDescriptor => write!(f, "Bad file descriptor"),
            Self::NoChildProcesses => write!(f, "No child processes"),
            Self::ResourceDeadlockWouldOccur => write!(f, "Resource deadlock would occur"),
            Self::OutOfMemory => write!(f, "Out of memory"),
            Self::AccessDenied => write!(f, "Access denied"),
            Self::BadAddress => write!(f, "Bad address"),
            Self::BlockDeviceRequired => write!(f, "Block device required"),
            Self::DeviceBusy => write!(f, "Device or resources busy"),
            Self::AlreadyExists => write!(f, "File or directory already exists"),
            Self::CrossDeviceLink => write!(f, "Cross-device link"),
            Self::NoSuchDevice => write!(f, "No such device"),
            Self::NotDirectory => write!(f, "Not a directory"),
            Self::IsDirectory => write!(f, "Is a directory"),
            Self::InvalidArgument => write!(f, "Invalid argument"),
            Self::FileTableOverflow => write!(f, "File table overflow"),
            Self::TooManyOpenFiles => write!(f, "Too many open files"),
            Self::NotTTY => write!(f, "Not a TTY"),
            Self::TextFileBusy => write!(f, "Text file busy"),
            Self::FileTooLarge => write!(f, "File too large"),
            Self::NoSpaceLeftOnDevice => write!(f, "No space left on device"),
            Self::IllegalSeek => write!(f, "Illegal seek"),
            Self::ReadOnlyFilesystem => write!(f, "Read-only file system"),
            Self::TooManyLinks => write!(f, "Too many links"),
            Self::BrokenPipe => write!(f, "Broken pipe"),
            Self::MathArgumentOutOfDomain => write!(f, "Math argument out of domain"),
            Self::ResultTooLarge => write!(f, "Result too large"),
            Self::ResourceUnavailableTryAgain => write!(f, "Resource unavailable, try again"),
            Self::OperationInProgress => write!(f, "Operation in-progress"),
            Self::OperationAlreadyInProgress => write!(f, "Operation already in-progress"),
            Self::SocketNotSupported => write!(f, "Socket is not supported"),
            Self::DestinationAddressRequired => write!(f, "Destination address required"),
            Self::MessageTooLong => write!(f, "Message too long"),
            Self::ProtocolWrongTypeForSocket => write!(f, "Protocol wrong socket type"),
            Self::ProtocolNotAvailable => write!(f, "Protocol is not available"),
            Self::ProtocolNotSupported => write!(f, "Protocol is not supported"),
            Self::SocketTypeNotSupported => write!(f, "Socket type is not supported"),
            Self::OperationNotSupported => write!(f, "Operation is not supported"),
            Self::ProtocolFamilyNotSupported => write!(f, "Protocol family is not supported"),
            Self::AddressFamilyNotSupported => write!(f, "Address family is not supported by protocol"),
            Self::AddressInUse => write!(f, "Address in use"),
            Self::AddressNotAvailable => write!(f, "Address is not available"),
            Self::NetworkDown => write!(f, "Network down"),
            Self::NetworkUnreachable => write!(f, "Network unreachable"),
            Self::NetworkReset => write!(f, "Network reset"),
            Self::ConnectionAborted => write!(f, "Connection aborted"),
            Self::ConnectionReset => write!(f, "Connection reset"),
            Self::NoBufferSpaceAvailable => write!(f, "No buffer space available"),
            Self::SocketIsConnected => write!(f, "Transport endpoint is already connected"),
            Self::SocketNotConnected => write!(f, "Transport endpoint is not connected"),
            Self::Shutdown => write!(f, "Cannot send after transport endpoint shutdown"),
            Self::TooManyReferences => write!(f, "Too many references: cannot splice"),
            Self::TimedOut => write!(f, "Connection timed out"),
            Self::ConnectionRefused => write!(f, "Connection refused"),
            Self::TooManySymbolicLinks => write!(f, "Too many symbolic links: cannot link"),
            Self::FileNameTooLong => write!(f, "File name is too long"),
            Self::HostDown => write!(f, "Host is down"),
            Self::HostUnreachable => write!(f, "No route to host"),
            Self::DirectoryNotEmpty => write!(f, "Directory is not empty"),
            Self::ProcessLimitReached => write!(f, "Process limit reached"),
            Self::TooManyUsers => write!(f, "Too many users"),
            Self::DiskQuotaExceeded => write!(f, "Disk quota exceeded"),
            Self::StaleFileHandle => write!(f, "Stale NFS file handle"),
            Self::RemoteResourceNotAvailable => write!(f, "Too many levels of remote in path"),
            Self::BadRPC => write!(f, "RPC struct is bad"),
            Self::RPCMismatch => write!(f, "RPC version mismatch"),
            Self::ProgramUnavailable => write!(f, "Program unavailable"),
            Self::ProgramMismatch => write!(f, "Program version mismatch"),
            Self::ProcedureUnavailable => write!(f, "Procedure unavailable for program"),
            Self::NoLocksAvailable => write!(f, "No record locks available"),
            Self::FunctionNotImplemented => write!(f, "Function is not implemented"),
            Self::InappropriateFileType => write!(f, "Inappropriate file type or format"),
            Self::AuthenticationError => write!(f, "Authentication error"),
            Self::NeedAuthentication => write!(f, "Need authentication"),
            Self::PowerOff => write!(f, "Device power off"),
            Self::DeviceError => write!(f, "Device error"),
            Self::ValueOverflow => write!(f, ""),
            Self::BadExecutable => write!(f, "Bad executable"),
            Self::BadArchitecture => write!(f, "Bad architecture"),
            Self::SharedLibraryVersionMismatch => write!(f, "Shared library version mismatch"),
            Self::BadMachO => write!(f, "Malformed Mach-O"),
            Self::OperationCanceled => write!(f, "Operation canceled"),
            Self::IdentifierRemoved => write!(f, "Identifier removed"),
            Self::NoMessageAvailable => write!(f, "No message available"),
            Self::IllegalByteSequence => write!(f, "Illegal byte sequence"),
            Self::AttributeNotFound => write!(f, "Attribute not found"),
            Self::BadMessage => write!(f, "Bad message"),
            Self::MultihopAttempted => write!(f, "Multihop attempted"),
            Self::NoDataAvailable => write!(f, "No data available"),
            Self::LinkHasBeenSevered => write!(f, "Link has been severed"),
            Self::NoStreamResources => write!(f, "No stream resources"),
            Self::NotStructuredStream => write!(f, "Not a structured stream"),
            Self::ProtocolError => write!(f, "Protocol error"),
            Self::TimerExpired => write!(f, "Timer expired"),
            Self::OperationNotSupportedOnSocket => write!(f, "Operation is not supported on socket"),
            Self::NoPolicy => write!(f, "No policy"),
            Self::NotRecoverable => write!(f, "Not recoverable"),
            Self::OwnerDead => write!(f, "Owner dead"),
            Self::QueueFull => write!(f, "Queue full"),
        }
    }
}